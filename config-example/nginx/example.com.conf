server {
  listen 80;
	server_name example.com;

	root /var/www/example.com/static;

  gzip on;
  gzip_proxied any;
  gzip_comp_level 4;
  gzip_types text/css application/javascript image/svg+xml;

  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;
  keepalive_timeout 65;
  types_hash_max_size 2048;
  sendfile_max_chunk 512k;

  # tuning performance for log request
  access_log off;
  error_log off;

	location / {
    try_files $uri @app;
  }

  location @app {
    proxy_pass http://localhost:8081;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;
    proxy_redirect        off;
    proxy_set_header      Host $host;
    proxy_set_header      X-Real-IP $remote_addr;
    proxy_set_header      X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header      Proxy "";

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload";
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    # Content Security Policy (CSP) Header Not Set
    add_header Content-Security-Policy "default-src 'self' 'unsafe-eval' 'unsafe-inline' blob: data: gap: ws: wss: *.google-analytics.com *.googletagmanager.com *.googleapis.com *.google.com *.gstatic.com *.facebook.com *.freshworks.com *.freshdesk.com *.strip-vr.com *.amazonaws.com";
    add_header Content-Security-Policy "style-src 'self' 'unsafe-inline' *.google-analytics.com *.googletagmanager.com *.googleapis.com *.google.com *.gstatic.com *.facebook.com *.deovr.com *.freshworks.com *.freshdesk.com";
    add_header Content-Security-Policy "connect-src 'self' wss: https:";
    # XSS
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "origin";
  }

  location /.well-known {
    alias /var/www/example.com/public/.well-known;
  }

  location /_next/static/ {
    alias /var/www/example.com/.next/static/$1;
    access_log off;
    expires max;
  }

  location /static/ {
    alias /var/www/example.com/static/$1;
    expires max;
    autoindex off;
  }
}

server {
  listen 80;
  server_name www.example.com;

  location / {
    return 301 https://example.com$request_uri;
  }

  location /.well-known {
    alias /var/www/example.com/public/.well-known;
  }
}